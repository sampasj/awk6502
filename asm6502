# asm6502 - assembler and interpreter for MOS 6502 computer
#   usage: awk6502 -f asm program-file data-file...

BEGIN {
    srcfile = ARGV[1]
    ARGV[1] = ""  # remaining files are data
    TRACE = 1     # 1:trace print registers 0:not print
    tempfile = "asm6502.temp"
    flagB = flagI = 1
    setStatusRegister()
    setopcodetbl()
    setaddressingmodetbl()
    assemblerpass1()
    assemblerpass2()
    interpreter()
}

function setopcodetbl() {
    op["BCC"] = 144    # 0x90
    op["BCS"] = 176    # 0xB0
    op["BEQ"] = 240    # 0xF0
    op["BMI"] = 48     # 0x30
    op["BNE"] = 208    # 0xD0
    op["BPL"] = 16     # 0x10
    op["BRK"] = 0      # 0x00
    op["BVC"] = 80     # 0x50
    op["BVS"] = 112    # 0x70
    op["CLC"] = 24     # 0x18
    op["CLD"] = 216    # 0xD8
    op["CLI"] = 88     # 0x58
    op["CLV"] = 184    # 0xB8
    op["DEX"] = 202    # 0xCA
    op["DEY"] = 136    # 0x88
    op["INX"] = 232    # 0xE8
    op["INY"] = 200    # 0xC8
    op["JSR"] = 32     # 0x20
    op["NOP"] = 234    # 0xEA
    op["PHA"] = 72     # 0x48
    op["PHP"] = 8      # 0x08
    op["PLA"] = 104    # 0x68
    op["PLP"] = 40     # 0x28
    op["RTI"] = 64     # 0x40
    op["RTS"] = 96     # 0x60
    op["SEC"] = 56     # 0x38
    op["SED"] = 248    # 0xF8
    op["SEI"] = 120    # 0x78
    op["TAX"] = 170    # 0xAA
    op["TAY"] = 168    # 0xA8
    op["TSX"] = 186    # 0xBA
    op["TXA"] = 138    # 0x8A
    op["TXS"] = 154    # 0x9A
    op["TYA"] = 152    # 0x98
    op["ADCabsolute"] = 96    # 0x60
    op["ADCzeropage"] = 101   # 0x65
    op["ADCimmediate"] = 105  # 0x69
    op["ADCabsoluteX"] = 125  # 0x7D
    op["ADCabsoluteY"] = 121  # 0x79
    op["ADCindirectX"] = 97   # 0x61
    op["ADCindirectY"] = 113  # 0x71
    op["ADCzeropageX"] = 117   # 0x75
}

function assemblerpass1() {
    # ASSEMBLER PASS 1
    FS = "[ \t]+"   # multiple spaces and/or tabs as separator
    while (getline <srcfile > 0) {
        sub(/;.*/, "")         # strip comments
        if ($2 == ".ORG") { sub(/\$/, "0x", $3); nextmem = org = strtonum($3) ; continue }
        symtab[$1] = nextmem   # remember label location
        if ($2 != "") {        # save op, addr, bytes if present
           mode = addrmode($2, $3)
           print $2 "\t" $3 "\t" mode >tempfile
           nextmem += usebytes[mode]
        }
    }
    close(tempfile)
}

function assemblerpass2() {
        nextmem = org
        while (getline <tempfile > 0) {
            if ($2 !~ /^[0-9]*$/)  # if symbolic addr,
               $2 = symtab[$2]     # replace by numeric value
            mem[nextmem] = op[$1]
            nextmem++
        }
}

function interpreter() {
        for (pc = org; pc >= 0; ) {
        #addr = mem[pc] % 1000
        code = mem[pc]
        if      (code == op["NOP"])   { if (TRACE == 1) traceprint("NOP")
                                        pc++
                                      }  # advance pc to next instraction
        #else if (code == op["put"])   { print acc }
        else if (code == op["ADCabsolute"]) { if (TRACE == 1) traceprint("ADCabsolute") 
                                              absaddr = mem[pc + 1] + mem[pc + 2] * 256
                                              acc = acc + mem[absaddr] + flagC
                                              if ( acc >= 256 ) flagC = flagV = 1
                                              if ( acc = 256 ) flagZ = 1    # acc=1 0000 0000
                                              acc %= 256
                                              if ( acc >= 128 ) flagN = 1   # acc=1... .... sc. MSB=1
                                              setStatusRegister()
                                              pc += 3
                                            }
        else                          { pc = -1 }  # halt if invalid
    }
}

function traceprint(mnemonic) {
    printf ( "pc=%X mnemonic=%s opcode=%X acc=%X\n", pc, mnemonic, code, acc)
}

function setStatusRegister (){
    statusRegister = 128 * flagN + 64 * flagV + 32 + 16 * flagB + 8 * flagD + 4 * flagI + 2 * flagZ + flagC
    if (TRACE == 1) printf ("statusRegister=%X\n", statusRegister )
}

function setaddressingmodetbl () {
    usebyte["implied"] = 1
    usebyte["absolute"] = 3
}

function addrmode(op, addr) {
    if (op == "NOP") return "inplied"
    else if (op == "ADC" && addr ~ /^\$....$/) return "absolute"
}